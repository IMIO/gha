name: Tag image in registry
description: Tag an image on registry and notify on Mattermost
inputs:
  IMAGE_NAME:
    description: 'Name of the image to tag'
    required: true
  IMAGE_TAG:
    description: 'Actual tag of the image'
    required: true
    default: 'staging'
  NEW_IMAGE_TAGS:
    description: 'New tags of the image'
    required: true
    default: 'latest'
  REGISTRY_URL:
    description: 'URL of the registry'
    required: true
  REGISTRY_USERNAME:
    description: 'Username to login to registry'
    required: true
  REGISTRY_PASSWORD:
    description: 'Password to login to registry'
    required: true
  MATTERMOST_WEBHOOK_URL:
    description: 'Webhook URL to send notifications on Mattermost, if not provided, notifications will not be sent'
    required: false
runs:
  using: 'composite'
  steps:
    - name: Install curl
      run: sudo apt-get update && sudo apt-get install -y curl
      shell: bash
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.REGISTRY_URL }}
        username: ${{ inputs.REGISTRY_USERNAME }}
        password: ${{ inputs.REGISTRY_PASSWORD }}
    - name: Download image
      run : docker pull ${{ inputs.REGISTRY_URL }}/${{ inputs.IMAGE_NAME }}:${{ inputs.IMAGE_TAG }}
      shell: bash
    - name: Tag image
      run: |
        set +e
        IFS=$'\n' read -r -d '' -a tags <<< "${{ inputs.NEW_IMAGE_TAGS }}"
        for tag in "${tags[@]}"; do
          echo "Tagging image with tag $tag"
          docker tag ${{ inputs.REGISTRY_URL }}/${{ inputs.IMAGE_NAME }}:${{ inputs.IMAGE_TAG }} ${{ inputs.REGISTRY_URL }}/${{ inputs.IMAGE_NAME }}:$tag
        done
      shell: bash
    - name: Push image
      run: |
        set +e
        IFS=$'\n' read -r -d '' -a tags <<< "${{ inputs.NEW_IMAGE_TAGS }}"
        for tag in "${tags[@]}"; do
          docker push ${{ inputs.REGISTRY_URL }}/${{ inputs.IMAGE_NAME }}:$tag;
        done
      shell: bash
    - name : Send notification on Mattermost
      if: ${{ inputs.MATTERMOST_WEBHOOK_URL != '' }}
      env:
        IMAGE_NAME: ${{ inputs.IMAGE_NAME }}
        IMAGE_TAG: ${{ inputs.IMAGE_TAG }}
        NEW_IMAGE_TAGS: ${{ inputs.NEW_IMAGE_TAGS }}
      run: |
        JOB_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
        MESSAGE="docker image $IMAGE_NAME:$IMAGE_TAG has been tagged with $NEW_IMAGE_TAGS on registry. [Click here to see job on GitHub]($JOB_URL) "
        curl -i -X POST -H 'Content-Type: application/json' -d "{\"text\": \"$MESSAGE\"}" ${{ inputs.MATTERMOST_WEBHOOK_URL }}
      shell: bash
    - name : Send failure notification on Mattermost
      if: ${{ failure() && inputs.MATTERMOST_WEBHOOK_URL != '' }}
      env:
        IMAGE_NAME: ${{ inputs.IMAGE_NAME }}
        IMAGE_TAG: ${{ inputs.IMAGE_TAG }}
        NEW_IMAGE_TAGS: ${{ inputs.NEW_IMAGE_TAGS }}
      run: |
        JOB_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
        MESSAGE="Error : docker image  $IMAGE_NAME:$IMAGE_TAG has not been been tagged with $NEW_IMAGE_TAGS on registry. [Click here to see job on GitHub]($JOB_URL)"
        curl -i -X POST -H 'Content-Type: application/json' -d "{\"text\": \"$MESSAGE\"}" ${{ inputs.MATTERMOST_WEBHOOK_URL }}
      shell: bash