name: Run code analysis
description: Run code analysis and notify on Mattermost
inputs:
  BUILDOUT_CONFIG_FILE:
    description: 'Path to buildout configuration file'
    required: true
    default: "buildout.cfg"
  CACHE_KEY:
    description: 'Cache key'
    required: false
  EGGS_PATH:
    description: 'Path to eggs directory'
    required: true
    default: "./eggs"
  INSTALL_DEPENDENCIES_COMMANDS:
    description: 'Commands to install dependencies'
    required: false
  MATTERMOST_WEBHOOK_URL:
    description: 'Webhook URL to send notifications on Mattermost, if not provided, notifications will not be sent'
    required: false
  PYTHON_VERSION:
    description: 'Python version to use'
    required: false
  TEST_COMMAND:
    description: 'Command to run tests'
    required: true
    default: "bin/test"
runs:
  using: 'composite'
  steps:
    - name: Install curl and git
      run: |
        if which curl > /dev/null && which git > /dev/null; then
          echo "curl and git are already installed"
        else
          sudo apt-get update && sudo apt-get install -y curl git
        fi
      shell: bash
    - name: Checkout
      uses: actions/checkout@v4
    - name: Cache eggs
      if: ${{ inputs.CACHE_KEY != '' }}
      uses: actions/cache@v4
      env:
        cache-name: cache-eggs
      with:
        path: ${{ inputs.EGGS_PATH }}
        key: ${{ inputs.CACHE_KEY }}
    - name: Setup Python
      if: ${{ inputs.PYTHON_VERSION != '' }}
      uses: actions/setup-python@v5.5.0
      with:
        python-version: ${{ inputs.PYTHON_VERSION }}
    - name: Install dependencies
      if: ${{ inputs.INSTALL_DEPENDENCIES_COMMANDS != '' }}
      shell: bash
      run: |
        set +e
        IFS=$'\n' read -r -d '' -a commands <<< "${{ inputs.INSTALL_DEPENDENCIES_COMMANDS }}"
        for command in "${commands[@]}"; do
          echo "Running command: $command"
          $command
        done
    - name: Run buildout
      shell: bash
      run: |
        buildout -c ${{ inputs.BUILDOUT_CONFIG_FILE }} buildout:eggs-directory=${{ inputs.EGGS_PATH }}
    - name: Run tests
      shell: bash
      run: |
        ${{ inputs.TEST_COMMAND }}
    - name : Send notification on Mattermost
      if: ${{ inputs.MATTERMOST_WEBHOOK_URL != '' }}
      run: |
        ESCAPED_COMMAND=$(echo ${{ inputs.TEST_COMMAND }} | sed 's/\\/\\\\/g')
        JOB_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
        MESSAGE="Test has run successfully. ([Repository: ${{ github.repository }}](${{ github.server_url }}/${{ github.repository }}), Branch: ${{ github.ref_name }}, [View commit on GitHub](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}), Test command: $ESCAPED_COMMAND, Python version: ${{ inputs.PYTHON_VERSION }}) [Click here to see job on GitHub]($JOB_URL)"
        curl -i -X POST -H 'Content-Type: application/json' -d "{\"text\": \"$MESSAGE\"}" ${{ inputs.MATTERMOST_WEBHOOK_URL }}
      shell: bash
    - name : Send failure notification on Mattermost
      if: ${{ failure() && inputs.MATTERMOST_WEBHOOK_URL != '' }}
      run: |
        ESCAPED_COMMAND=$(echo ${{ inputs.TEST_COMMAND }} | sed 's/\\/\\\\/g')
        JOB_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
        MESSAGE="Error : Test has failed. ([Repository: ${{ github.repository }}](${{ github.server_url }}/${{ github.repository }}), Branch: ${{ github.ref_name }}, [View commit on GitHub](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}), Test command: $ESCAPED_COMMAND, Python version: ${{ inputs.PYTHON_VERSION }}) [Click here to see job on GitHub]($JOB_URL)"
        curl -i -X POST -H 'Content-Type: application/json' -d "{\"text\": \"$MESSAGE\"}" ${{ inputs.MATTERMOST_WEBHOOK_URL }}
      shell: bash