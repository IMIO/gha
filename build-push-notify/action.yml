name: Update image in registry
description: Build and push image to registry and notify on Mattermost
inputs:
  IMAGE_NAME:
    description: 'Name of the image to build and push'
    required: true
  IMAGE_TAGS:
    description: 'Tags of the image to build and push (one per line)'
    required: true
  REGISTRY_URL:
    description: 'URL of the registry'
    required: true
  REGISTRY_USERNAME:
    description: 'Username to login to registry'
    required: true
  REGISTRY_PASSWORD:
    description: 'Password to login to registry'
    required: true
  MATTERMOST_WEBHOOK_URL:
    description: 'Webhook URL to send notifications on Mattermost'
    required: true
  PLATFORMS:
    description: 'Platforms to build the image for'
    required: true
    default: 'linux/amd64'
  CONTEXT:
    description: 'Path to the Dockerfile'
    required: true
    default: './'
  DOCKERFILE:
    description: 'Name of the Dockerfile'
    required: true
    default: 'Dockerfile'
  BUILD_ARGS:
    description: 'Build arguments to pass to the Dockerfile'
    required: true
    default: ''
  TARGET:
    description: 'Target stage to build'
    required: false
runs:
  using: 'composite'
  steps:
    - name: Install curl
      run: sudo apt-get update && sudo apt-get install -y curl
      shell: bash
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.REGISTRY_URL }}
        username: ${{ inputs.REGISTRY_USERNAME }}
        password: ${{ inputs.REGISTRY_PASSWORD }}
    - name: Build
      uses: docker/build-push-action@v6.2.0
      with:
        context: ${{ inputs.CONTEXT }}
        file: ${{ inputs.DOCKERFILE }}
        tags: |
          ${{ inputs.IMAGE_TAGS }}
        platforms: ${{ inputs.PLATFORMS }}
        pull: true
        push: true
        build-args: ${{ inputs.BUILD_ARGS }}
        target: ${{ inputs.TARGET }}
    - name : Send notification on Mattermost
      env:
        IMAGE_NAME: ${{ inputs.IMAGE_NAME }}
        IMAGE_TAGS: ${{ inputs.IMAGE_TAGS }}
      run: |
        JOB_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
        MESSAGE="docker image $IMAGE_NAME:$IMAGE_TAGS has been updated on registry. [Click here to see job on GitHub]($JOB_URL) "
        curl -i -X POST -H 'Content-Type: application/json' -d "{\"text\": \"$MESSAGE\"}" ${{ inputs.MATTERMOST_WEBHOOK_URL }}
      shell: bash
    - name : Send failure notification on Mattermost
      if: ${{ failure() }}
      env:
        IMAGE_NAME: ${{ inputs.IMAGE_NAME }}
        IMAGE_TAGS: ${{ inputs.IMAGE_TAGS }}
      run: |
        JOB_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
        MESSAGE="Error : docker image  $IMAGE_NAME:$IMAGE_TAGS has not been updated on registry. [Click here to see job on GitHub]($JOB_URL)"
        curl -i -X POST -H 'Content-Type: application/json' -d "{\"text\": \"$MESSAGE\"}" ${{ inputs.MATTERMOST_WEBHOOK_URL }}
      shell: bash