name: Build push deb and notify
description: Build a deb package, push it on on repository and notify on mattermost

inputs:
  REPOSITORY_URL:
    description: 'URL of the repository'
    required: true
  REPOSITORY_LOGIN:
    description: 'Login for the repository'
    required: true
  REPOSITORY_PASSWORD:
    description: 'Passsword for the repository'
    required: true
  PACKAGE_NAME:
    description: 'Name of the package to build'
    required: true
  PACKAGE_INSTALL_PATH:
    description: 'Path to install package'
    required: true
    default: '/usr/lib/python3/dist-packages'
  PACKAGE_VERSION:
    description: 'Package version'
    required: true
  PACKAGE_DEPENDENCY:
    description: 'Package dependency'
    required: true
    default: 'passerelle'
  SIGNER_KEY_ID:
    description: 'ID of the key to sign deb package'
    required: true
    default: '9D4C79E197D914CF60C05332C0025EEBC59B875B'
  SIGNER_KEY:
    description: 'Key to sign deb package (base64 encoded)'
    required: true
    default: ''
  SIGNER_KEY_PASSPHRASE:
    description: 'Passphrase to sign deb package'
    required: true
  MATTERMOST_WEBHOOK_URL:
    description: 'Webhook URL to send notifications on Mattermost'
    required: true

runs:
  using: 'composite'
  steps:
    - name: 'Install curl, dpkg-sig, python3-pip and ruby-dev'
      run: sudo apt-get update && sudo apt-get install -y curl dpkg-sig python3-pip ruby-dev
      shell: bash
    - name: 'Install fpm'
      run: sudo gem install fpm
      shell: bash
    - name: 'Install signing key'
      shell: bash
      run: |
        echo '${{ inputs.SIGNER_KEY }}' > /tmp/key.b64 \
        && base64 -d /tmp/key.b64 > /tmp/key.gpg \
        && gpg --passphrase '${{ inputs.SIGNER_KEY_PASSPHRASE }}' --pinentry-mode loopback --import /tmp/key.gpg
    - name: 'Build package'
      run: |
        fpm -a amd64 \
          --python-bin python3 \
          --python-pip pip3 \
          --python-package-name-prefix python3 \
          -n ${{ inputs.PACKAGE_NAME }} \
          -s python \
          -t deb \
          -v ${{ inputs.PACKAGE_VERSION }} \
          --python-install-lib ${{ inputs.PACKAGE_INSTALL_PATH }} \
          -d ${{ inputs.PACKAGE_DEPENDENCY }} \
          --no-auto-depends \
          setup.py
      shell: bash
    - name: 'Sign package'
      run: |
        dpkg-sig \
        -g "--pinentry-mode loopback --no-tty --yes --batch --passphrase '${{ inputs.SIGNER_KEY_PASSPHRASE }}'" \
        -s builder \
        -k ${{ inputs.SIGNER_KEY_ID }} \
        ${{ inputs.PACKAGE_NAME }}_${{ inputs.PACKAGE_VERSION }}_amd64.deb
      shell: bash
    - name: 'Upload package'
      run: |
        curl \
          -vk --fail -X POST -H Content-Type:multipart/form-data \
          -u ${{ inputs.REPOSITORY_LOGIN }}:${{ inputs.REPOSITORY_PASSWORD }} \
          --data-binary ${{ inputs.PACKAGE_NAME }}_${{ inputs.PACKAGE_VERSION }}_amd64.deb \
          ${{ inputs.REPOSITORY_URL }}
      shell: bash
    - name : Send notification on Mattermost
      env:
        PACKAGE_NAME: ${{ inputs.PACKAGE_NAME }}
      run: |
        JOB_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
        MESSAGE="Deb build $PACKAGE_NAME OK . [Click here to see job on GitHub]($JOB_URL) "
        curl -i -X POST -H 'Content-Type: application/json' -d "{\"text\": \"$MESSAGE\"}" ${{ inputs.MATTERMOST_WEBHOOK_URL }}
      shell: bash
    - name : Send failure notification on Mattermost
      if: ${{ failure() }}
      env:
        PACKAGE_NAME: ${{ inputs.PACKAGE_NAME }}
      run: |
        JOB_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
        MESSAGE="Error : cannot build deb $PACKAGE_NAME [Click here to see job on GitHub]($JOB_URL)"
        curl -i -X POST -H 'Content-Type: application/json' -d "{\"text\": \"$MESSAGE\"}" ${{ inputs.MATTERMOST_WEBHOOK_URL }}
      shell: bash
